# Научитесь пользоваться стандартной структурой данных deque для целых чисел.  Напишите программу, содержащую описание
# дека и моделирующую работу дека, реализовав все указанные здесь методы. Программа считывает последовательность команд
# и в зависимости от команды выполняет ту или иную операцию. После выполнения каждой команды программа должна вывести одну строчку.
#
# Возможные команды для программы:
# push_front n - Добавить (положить) в начало дека новый элемент. Программа должна вывести ok.
# push_back n - Добавить (положить) в конец дека новый элемент. Программа должна вывести ok.
# pop_front - Извлечь из дека первый элемент. Программа должна вывести его значение.
# pop_back - Извлечь из дека последний элемент. Программа должна вывести его значение.
# front - Узнать значение первого элемента (не удаляя его). Программа должна вывести его значение.
# back - Узнать значение последнего элемента (не удаляя его). Программа должна вывести его значение.
# size - Вывести количество элементов в деке.
# clear - Очистить дек (удалить из него все элементы) и вывести ok.
# exit - Программа должна вывести bye и завершить работу.
#
# Гарантируется, что количество элементов в деке в любой момент не превосходит 100.
# Перед исполнением операций pop_front, pop_back, front, back программа должна проверять, содержится ли в деке хотя бы один элемент.
# Если во входных данных встречается операция pop_front, pop_back, front, back, и при этом дек пуст,
# то программа должна вместо числового значения вывести строку error.

import sys

dequeue = []

for i in sys.stdin:
    lst = list(i.split())
    if lst[0] == "push_back":
        n = int(lst[1])
        dequeue.append(n)
        print("ok")
    elif lst[0] == "push_front":
        n = int(lst[1])
        dequeue.insert(0, n)
        print("ok")
    elif lst[0] == "pop_front":
        if len(dequeue) == 0:
            print("error")
        else:
            print(dequeue.pop(0))
    elif lst[0] == "pop_back":
        if len(dequeue) == 0:
            print("error")
        else:
            print(dequeue.pop(-1))
    elif lst[0] == "front":
        if len(dequeue) == 0:
            print("error")
        else:
            print(dequeue[0])
    elif lst[0] == "back":
        if len(dequeue) == 0:
            print("error")
        else:
            print(dequeue[-1])
    elif lst[0] == "size":
        print(len(dequeue))
    elif lst[0] == "clear":
        dequeue.clear()
        print("ok")
    else:
        print("bye")
        break