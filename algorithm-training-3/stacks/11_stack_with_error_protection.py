# Научитесь пользоваться стандартной структурой данных stack для целых чисел. Напишите программу, содержащую описание стека
# и моделирующую работу стека, реализовав все указанные здесь методы. Программа считывает последовательность команд
# и в зависимости от команды выполняет ту или иную операцию. После выполнения каждой команды программа должна вывести одну строчку.
# Возможные команды для программы:
#
# push n - Добавить в стек число n (значение n задается после команды). Программа должна вывести ok.
# pop - Удалить из стека последний элемент. Программа должна вывести его значение.
# back - Программа должна вывести значение последнего элемента, не удаляя его из стека.
# size - Программа должна вывести количество элементов в стеке.
# clear - Программа должна очистить стек и вывести ok.
# exit - Программа должна вывести bye и завершить работу.
#
# Перед исполнением операций back и pop программа должна проверять, содержится ли в стеке хотя бы один элемент.
# Если во входных данных встречается операция back или pop, и при этом стек пуст, то программа должна вместо числового
# значения вывести строку error.

import sys

stack = []

for i in sys.stdin:
    lst = list(i.split())
    if lst[0] == "push":
        n = int(lst[1])
        stack.append(n)
        print("ok")
    elif lst[0] == "pop":
        if len(stack) == 0:
            print("error")
        else:
            print(stack.pop())
    elif lst[0] == "back":
        if len(stack) == 0:
            print("error")
        else:
            print(stack[-1])
    elif lst[0] == "size":
        print(len(stack))
    elif lst[0] == "clear":
        stack.clear()
        print("ok")
    else:
        print("bye")
        break